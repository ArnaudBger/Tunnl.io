// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ContentAccepted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContentAccepted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ContentAccepted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContentAccepted", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ContentAccepted | null {
    return changetype<ContentAccepted | null>(
      store.get_in_block("ContentAccepted", id.toHexString())
    );
  }

  static load(id: Bytes): ContentAccepted | null {
    return changetype<ContentAccepted | null>(
      store.get("ContentAccepted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deal(): string {
    let value = this.get("deal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deal(value: string) {
    this.set("deal", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ContentDisputed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContentDisputed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ContentDisputed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContentDisputed", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ContentDisputed | null {
    return changetype<ContentDisputed | null>(
      store.get_in_block("ContentDisputed", id.toHexString())
    );
  }

  static load(id: Bytes): ContentDisputed | null {
    return changetype<ContentDisputed | null>(
      store.get("ContentDisputed", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deal(): string {
    let value = this.get("deal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deal(value: string) {
    this.set("deal", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ContentPosted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContentPosted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ContentPosted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContentPosted", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ContentPosted | null {
    return changetype<ContentPosted | null>(
      store.get_in_block("ContentPosted", id.toHexString())
    );
  }

  static load(id: Bytes): ContentPosted | null {
    return changetype<ContentPosted | null>(
      store.get("ContentPosted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deal(): string {
    let value = this.get("deal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deal(value: string) {
    this.set("deal", Value.fromString(value));
  }

  get postURL(): string {
    let value = this.get("postURL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set postURL(value: string) {
    this.set("postURL", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DealCompleted extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealCompleted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DealCompleted must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DealCompleted", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DealCompleted | null {
    return changetype<DealCompleted | null>(
      store.get_in_block("DealCompleted", id.toHexString())
    );
  }

  static load(id: Bytes): DealCompleted | null {
    return changetype<DealCompleted | null>(
      store.get("DealCompleted", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deal(): string {
    let value = this.get("deal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deal(value: string) {
    this.set("deal", Value.fromString(value));
  }

  get influencerAmount(): BigInt {
    let value = this.get("influencerAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set influencerAmount(value: BigInt) {
    this.set("influencerAmount", Value.fromBigInt(value));
  }

  get brandAmount(): BigInt {
    let value = this.get("brandAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set brandAmount(value: BigInt) {
    this.set("brandAmount", Value.fromBigInt(value));
  }

  get treasuryAmount(): BigInt {
    let value = this.get("treasuryAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set treasuryAmount(value: BigInt) {
    this.set("treasuryAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DealCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DealCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DealCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DealCreated | null {
    return changetype<DealCreated | null>(
      store.get_in_block("DealCreated", id.toHexString())
    );
  }

  static load(id: Bytes): DealCreated | null {
    return changetype<DealCreated | null>(
      store.get("DealCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get dealId(): BigInt {
    let value = this.get("dealId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dealId(value: BigInt) {
    this.set("dealId", Value.fromBigInt(value));
  }

  get param1_brand(): Bytes {
    let value = this.get("param1_brand");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set param1_brand(value: Bytes) {
    this.set("param1_brand", Value.fromBytes(value));
  }

  get param1_influencer(): Bytes {
    let value = this.get("param1_influencer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set param1_influencer(value: Bytes) {
    this.set("param1_influencer", Value.fromBytes(value));
  }

  get param1_brandDeposit(): BigInt {
    let value = this.get("param1_brandDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param1_brandDeposit(value: BigInt) {
    this.set("param1_brandDeposit", Value.fromBigInt(value));
  }

  get param1_status(): i32 {
    let value = this.get("param1_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set param1_status(value: i32) {
    this.set("param1_status", Value.fromI32(value));
  }

  get param2_timeToPost(): BigInt {
    let value = this.get("param2_timeToPost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param2_timeToPost(value: BigInt) {
    this.set("param2_timeToPost", Value.fromBigInt(value));
  }

  get param2_timeToVerify(): BigInt {
    let value = this.get("param2_timeToVerify");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param2_timeToVerify(value: BigInt) {
    this.set("param2_timeToVerify", Value.fromBigInt(value));
  }

  get param2_timeToPerform(): BigInt {
    let value = this.get("param2_timeToPerform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param2_timeToPerform(value: BigInt) {
    this.set("param2_timeToPerform", Value.fromBigInt(value));
  }

  get param2_postDeadline(): BigInt {
    let value = this.get("param2_postDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param2_postDeadline(value: BigInt) {
    this.set("param2_postDeadline", Value.fromBigInt(value));
  }

  get param2_verifyDeadline(): BigInt {
    let value = this.get("param2_verifyDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param2_verifyDeadline(value: BigInt) {
    this.set("param2_verifyDeadline", Value.fromBigInt(value));
  }

  get param2_performDeadline(): BigInt {
    let value = this.get("param2_performDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param2_performDeadline(value: BigInt) {
    this.set("param2_performDeadline", Value.fromBigInt(value));
  }

  get param3_postURL(): string {
    let value = this.get("param3_postURL");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set param3_postURL(value: string) {
    this.set("param3_postURL", Value.fromString(value));
  }

  get param3_impressionsTarget(): BigInt {
    let value = this.get("param3_impressionsTarget");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set param3_impressionsTarget(value: BigInt) {
    this.set("param3_impressionsTarget", Value.fromBigInt(value));
  }

  get param3_isAccepted(): boolean {
    let value = this.get("param3_isAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set param3_isAccepted(value: boolean) {
    this.set("param3_isAccepted", Value.fromBoolean(value));
  }

  get param3_isDisputed(): boolean {
    let value = this.get("param3_isDisputed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set param3_isDisputed(value: boolean) {
    this.set("param3_isDisputed", Value.fromBoolean(value));
  }

  get param3_influencerSigned(): boolean {
    let value = this.get("param3_influencerSigned");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set param3_influencerSigned(value: boolean) {
    this.set("param3_influencerSigned", Value.fromBoolean(value));
  }

  get param3_expectedContentHash(): Bytes {
    let value = this.get("param3_expectedContentHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set param3_expectedContentHash(value: Bytes) {
    this.set("param3_expectedContentHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DealSigned extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DealSigned entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DealSigned must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DealSigned", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DealSigned | null {
    return changetype<DealSigned | null>(
      store.get_in_block("DealSigned", id.toHexString())
    );
  }

  static load(id: Bytes): DealSigned | null {
    return changetype<DealSigned | null>(
      store.get("DealSigned", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deal(): string {
    let value = this.get("deal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deal(value: string) {
    this.set("deal", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DepositRefunded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositRefunded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DepositRefunded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositRefunded", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DepositRefunded | null {
    return changetype<DepositRefunded | null>(
      store.get_in_block("DepositRefunded", id.toHexString())
    );
  }

  static load(id: Bytes): DepositRefunded | null {
    return changetype<DepositRefunded | null>(
      store.get("DepositRefunded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deal(): string {
    let value = this.get("deal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deal(value: string) {
    this.set("deal", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DisputedContentVerified extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DisputedContentVerified entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DisputedContentVerified must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DisputedContentVerified", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DisputedContentVerified | null {
    return changetype<DisputedContentVerified | null>(
      store.get_in_block("DisputedContentVerified", id.toHexString())
    );
  }

  static load(id: Bytes): DisputedContentVerified | null {
    return changetype<DisputedContentVerified | null>(
      store.get("DisputedContentVerified", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get deal(): string {
    let value = this.get("deal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deal(value: string) {
    this.set("deal", Value.fromString(value));
  }

  get isAccepted(): boolean {
    let value = this.get("isAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAccepted(value: boolean) {
    this.set("isAccepted", Value.fromBoolean(value));
  }

  get influencerAmount(): BigInt {
    let value = this.get("influencerAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set influencerAmount(value: BigInt) {
    this.set("influencerAmount", Value.fromBigInt(value));
  }

  get brandAmount(): BigInt {
    let value = this.get("brandAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set brandAmount(value: BigInt) {
    this.set("brandAmount", Value.fromBigInt(value));
  }

  get treasuryAmount(): BigInt {
    let value = this.get("treasuryAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set treasuryAmount(value: BigInt) {
    this.set("treasuryAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Deal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Deal | null {
    return changetype<Deal | null>(store.get_in_block("Deal", id));
  }

  static load(id: string): Deal | null {
    return changetype<Deal | null>(store.get("Deal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get brand(): string {
    let value = this.get("brand");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set brand(value: string) {
    this.set("brand", Value.fromString(value));
  }

  get influencer(): string {
    let value = this.get("influencer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set influencer(value: string) {
    this.set("influencer", Value.fromString(value));
  }

  get brandDeposit(): BigInt {
    let value = this.get("brandDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set brandDeposit(value: BigInt) {
    this.set("brandDeposit", Value.fromBigInt(value));
  }

  get postURL(): string | null {
    let value = this.get("postURL");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set postURL(value: string | null) {
    if (!value) {
      this.unset("postURL");
    } else {
      this.set("postURL", Value.fromString(<string>value));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get timeToPost(): BigInt {
    let value = this.get("timeToPost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeToPost(value: BigInt) {
    this.set("timeToPost", Value.fromBigInt(value));
  }

  get timeToVerify(): BigInt {
    let value = this.get("timeToVerify");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeToVerify(value: BigInt) {
    this.set("timeToVerify", Value.fromBigInt(value));
  }

  get timeToPerform(): BigInt {
    let value = this.get("timeToPerform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timeToPerform(value: BigInt) {
    this.set("timeToPerform", Value.fromBigInt(value));
  }

  get postDeadline(): BigInt {
    let value = this.get("postDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set postDeadline(value: BigInt) {
    this.set("postDeadline", Value.fromBigInt(value));
  }

  get verifyDeadline(): BigInt {
    let value = this.get("verifyDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set verifyDeadline(value: BigInt) {
    this.set("verifyDeadline", Value.fromBigInt(value));
  }

  get performDeadline(): BigInt {
    let value = this.get("performDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set performDeadline(value: BigInt) {
    this.set("performDeadline", Value.fromBigInt(value));
  }

  get impressionsTarget(): BigInt {
    let value = this.get("impressionsTarget");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set impressionsTarget(value: BigInt) {
    this.set("impressionsTarget", Value.fromBigInt(value));
  }

  get expectedContentHash(): Bytes {
    let value = this.get("expectedContentHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set expectedContentHash(value: Bytes) {
    this.set("expectedContentHash", Value.fromBytes(value));
  }

  get contentAccepted(): ContentAcceptedLoader {
    return new ContentAcceptedLoader(
      "Deal",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "contentAccepted"
    );
  }

  get contentDisputed(): ContentDisputedLoader {
    return new ContentDisputedLoader(
      "Deal",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "contentDisputed"
    );
  }

  get contentPosted(): ContentPostedLoader {
    return new ContentPostedLoader(
      "Deal",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "contentPosted"
    );
  }

  get dealCompleted(): DealCompletedLoader {
    return new DealCompletedLoader(
      "Deal",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "dealCompleted"
    );
  }

  get depositRefunded(): DepositRefundedLoader {
    return new DepositRefundedLoader(
      "Deal",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "depositRefunded"
    );
  }

  get disputedContentVerified(): DisputedContentVerifiedLoader {
    return new DisputedContentVerifiedLoader(
      "Deal",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "disputedContentVerified"
    );
  }

  get dealSigned(): DealSignedLoader {
    return new DealSignedLoader(
      "Deal",
      this.get("id")!
        .toBytes()
        .toHexString(),
      "dealSigned"
    );
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dealsAsBrand(): DealLoader {
    return new DealLoader("User", this.get("id")!.toString(), "dealsAsBrand");
  }

  get dealsAsInfluencer(): DealLoader {
    return new DealLoader(
      "User",
      this.get("id")!.toString(),
      "dealsAsInfluencer"
    );
  }

  get totalAmountEarned(): BigInt {
    let value = this.get("totalAmountEarned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountEarned(value: BigInt) {
    this.set("totalAmountEarned", Value.fromBigInt(value));
  }
}

export class ContentAcceptedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ContentAccepted[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ContentAccepted[]>(value);
  }
}

export class ContentDisputedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ContentDisputed[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ContentDisputed[]>(value);
  }
}

export class ContentPostedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): ContentPosted[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<ContentPosted[]>(value);
  }
}

export class DealCompletedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DealCompleted[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DealCompleted[]>(value);
  }
}

export class DepositRefundedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DepositRefunded[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DepositRefunded[]>(value);
  }
}

export class DisputedContentVerifiedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DisputedContentVerified[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DisputedContentVerified[]>(value);
  }
}

export class DealSignedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DealSigned[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DealSigned[]>(value);
  }
}

export class DealLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deal[]>(value);
  }
}
